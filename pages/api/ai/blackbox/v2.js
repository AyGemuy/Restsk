import fetch from 'node-fetch';
import crypto from 'crypto';

class BlackboxAI {
  constructor(model = 'blackboxai') {
    this.apiUrl = 'https://api.blackbox.ai/api/chat';
    this.headers = {
          "User-Agent":
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
          Accept: "*/*",
          "Accept-Language": "en-US,en;q=0.5",
          "Accept-Encoding": "gzip, deflate, br",
          Referer: "https://api.blackbox.ai/",
          "Content-Type": "application/json",
          Origin: "https://api.blackbox.ai",
          DNT: "1",
          "Sec-GPC": "1",
          "Alt-Used": "api.blackbox.ai",
          Connection: "keep-alive",
        };
    this.conversationHistory = {};
    this.defaultModel = model;
  }

  generateUniqueId() {
    return crypto.randomBytes(16).toString('hex');
  }

  async sendMessage(chatId, content, agentMode = null, web = false, imageGenerationMode = false, userSelectedModel = null) {
    if (!this.conversationHistory[chatId]) {
      this.conversationHistory[chatId] = [];
    }
    const message = { content, role: 'user' };
    this.conversationHistory[chatId].push(message);

    const payload = {
      messages: this.conversationHistory[chatId],
      previewToken: null,
      userId: null,
      codeModelMode: true,
      agentMode: agentMode ? { mode: true, id: agentMode.id, name: agentMode.name } : {},
      trendingAgentMode: {},
      isMicMode: false,
      maxTokens: 1024,
      playgroundTopP: null,
      playgroundTemperature: null,
      isChromeExt: false,
      githubToken: "",
      clickedAnswer2: false,
      clickedAnswer3: false,
      clickedForceWebSearch: false,
      visitFromDelta: false,
      mobileClient: false,
      userSelectedModel: userSelectedModel || this.defaultModel,
      validated: "00f37b34-a166-4efb-bce5-1312d87f2f94",
      imageGenerationMode,
      webSearchMode: web,
    };

    const response = await fetch(this.apiUrl, {
      method: 'POST',
      mode: 'cors',
      headers: this.headers,
      body: JSON.stringify(payload),
    });

    if (!response.ok) throw new Error(`API error: ${response.statusText}`);

    const data = await response.text();
    const cleanedResponse = data.replace(/Generated by BLACKBOX\.AI,.*?blackbox\.ai\n\n/g, '');
    const assistantMessage = { id: `response-${Date.now()}`, content: cleanedResponse, role: 'assistant' };
    this.conversationHistory[chatId].push(assistantMessage);

    return assistantMessage.content;
  }

  async continueConversation(chatId, content, agentMode = null, web = false, imageGenerationMode = false, userSelectedModel = null) {
    if (!this.conversationHistory[chatId]) throw new Error('Conversation not found');

    const userMessage = { content, role: 'user' };
    this.conversationHistory[chatId].push(userMessage);

    const payload = {
      messages: this.conversationHistory[chatId],
      previewToken: null,
      userId: null,
      codeModelMode: true,
      agentMode: agentMode ? { mode: true, id: agentMode.id, name: agentMode.name } : {},
      trendingAgentMode: {},
      isMicMode: false,
      maxTokens: 1024,
      playgroundTopP: null,
      playgroundTemperature: null,
      isChromeExt: false,
      githubToken: "",
      clickedAnswer2: false,
      clickedAnswer3: false,
      clickedForceWebSearch: false,
      visitFromDelta: false,
      mobileClient: false,
      userSelectedModel: userSelectedModel || this.defaultModel,
      validated: "00f37b34-a166-4efb-bce5-1312d87f2f94",
      imageGenerationMode,
      webSearchMode: web,
    };

    const response = await fetch(this.apiUrl, {
      method: 'POST',
      mode: 'cors',
      headers: this.headers,
      body: JSON.stringify(payload),
    });

    if (!response.ok) throw new Error(`API error: ${response.statusText}`);

    const data = await response.text();
    const cleanedResponse = data.replace(/Generated by BLACKBOX\.AI,.*?blackbox\.ai\n\n/g, '');
    const assistantMessage = { id: `response-${Date.now()}`, content: cleanedResponse, role: 'assistant' };
    this.conversationHistory[chatId].push(assistantMessage);

    return assistantMessage.content;
  }
}

export default async function handler(req, res) {
  try {
    const { prompt, chatId = crypto.randomBytes(16).toString('hex'), model = 'blackboxai', agent, id, name, web, image, continue: isContinue } = req.query;

    if (!prompt || !chatId) return res.status(400).json({ error: 'prompt and chatId are required' });

    const agentMode = agent === 'true' && id && name ? { mode: true, id: crypto.createHash('sha256').update(id).digest('hex'), name } : null;
    const webSearch = web === 'true' ? true : false;
    const imageGenerationMode = image === 'true' ? true : false;
    const userSelectedModel = model || null;

    const blackboxAI = new BlackboxAI(userSelectedModel);

    if (isContinue === 'true') {
      const response = await blackboxAI.continueConversation(chatId, prompt, agentMode, webSearch, imageGenerationMode, userSelectedModel);
      return res.status(200).json({ response });
    } else {
      const response = await blackboxAI.sendMessage(chatId, prompt, agentMode, webSearch, imageGenerationMode, userSelectedModel);
      return res.status(200).json({ result: response });
    }
  } catch (error) {
    return res.status(500).json({ error: 'Internal Server Error', details: error.message });
  }
}
